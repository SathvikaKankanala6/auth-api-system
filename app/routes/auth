from datetime import timedelta
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlmodel import Session, select

from ..models.user import User
from ..db import get_session
from ..core.security import verify_password, get_password_hash, create_access_token
from ..core.config import settings

router = APIRouter(prefix="/auth", tags=["Auth"])

@router.post("/register")
def register(form_data: OAuth2PasswordRequestForm = Depends(), session: Session = Depends(get_session)):
    existing = session.exec(select(User).where(User.username == form_data.username)).first()
    if existing:
        raise HTTPException(status_code=400, detail="Username already exists")
    user = User(username=form_data.username, hashed_password=get_password_hash(form_data.password))
    session.add(user)
    session.commit()
    session.refresh(user)
    return {"msg": "User created", "username": user.username}

@router.post("/login")
def login(form_data: OAuth2PasswordRequestForm = Depends(), session: Session = Depends(get_session)):
    user = session.exec(select(User).where(User.username == form_data.username)).first()
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")
    token = create_access_token({"sub": user.username, "role": user.role}, timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES))
    return {"access_token": token, "token_type": "bearer"}
